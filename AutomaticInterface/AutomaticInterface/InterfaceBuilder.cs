using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AutomaticInterface
{
    internal sealed record PropertyInfo(
        string Name,
        string Ttype,
        bool HasGet,
        PropertySetKind SetKind,
        bool IsRef,
        string Documentation
    );

    internal sealed record MethodInfo(
        string Name,
        string ReturnType,
        string Documentation,
        HashSet<string> Parameters,
        List<(string Arg, string WhereConstraint)> GenericArgs
    );

    public record EventInfo(string Name, string Type, string Documentation);

    public class InterfaceBuilder(string nameSpaceName, string interfaceName)
    {
        private const string Autogenerated = """
            //--------------------------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a tool.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
            // </auto-generated>
            //--------------------------------------------------------------------------------------------------


            """;

        private readonly List<PropertyInfo> propertyInfos = [];
        private readonly List<MethodInfo> methodInfos = [];
        private readonly List<EventInfo> events = [];
        private string classDocumentation = string.Empty;
        private string genericType = string.Empty;

        public bool HasNullable { get; set; }

        public void AddPropertyToInterface(
            string name,
            string ttype,
            bool hasGet,
            PropertySetKind hasSet,
            bool isRef,
            string documentation
        )
        {
            propertyInfos.Add(new(name, ttype, hasGet, hasSet, isRef, documentation));
        }

        public void AddGeneric(string v)
        {
            genericType = v;
        }

        public void AddClassDocumentation(string documentation)
        {
            classDocumentation = documentation;
        }

        public void AddMethodToInterface(
            string name,
            string returnType,
            string documentation,
            HashSet<string> parameters,
            List<(string, string)> genericArgs
        )
        {
            methodInfos.Add(new(name, returnType, documentation, parameters, genericArgs));
        }

        public void AddEventToInterface(string name, string type, string documentation)
        {
            events.Add(new(name, type, documentation));
        }

        public string Build()
        {
            var cb = new CodeBuilder();
            cb.Append(Autogenerated);

            if (HasNullable)
            {
                cb.AppendLine("#nullable enable");
            }

            cb.AppendLine($"namespace {nameSpaceName}");
            cb.AppendLine("{");

            cb.Indent();

            cb.AppendAndNormalizeMultipleLines(classDocumentation);

            cb.AppendLine(
                "[global::System.CodeDom.Compiler.GeneratedCode(\"AutomaticInterface\", \"\")]"
            );
            cb.AppendLine($"public partial interface {interfaceName}{genericType}");
            cb.AppendLine("{");

            cb.Indent();
            foreach (var prop in propertyInfos)
            {
                cb.AppendAndNormalizeMultipleLines(prop.Documentation);
                var @ref = prop.IsRef ? "ref " : string.Empty;
                var get = prop.HasGet ? "get; " : string.Empty;
                var set = GetSet(prop.SetKind);
                cb.AppendLine($"{@ref}{prop.Ttype} {prop.Name} {{ {get}{set}}}");
                cb.AppendLine("");
            }
            cb.Dedent();

            cb.Indent();
            foreach (var method in methodInfos)
            {
                BuildMethod(cb, method);
            }

            cb.Dedent();

            cb.Indent();
            foreach (var evt in events)
            {
                cb.AppendAndNormalizeMultipleLines(evt.Documentation);
                cb.AppendLine($"event {evt.Type} {evt.Name};");
                cb.AppendLine("");
            }
            cb.Dedent();

            cb.AppendLine("}");
            cb.Dedent();
            cb.AppendLine("}");

            if (HasNullable)
            {
                cb.AppendLine("#nullable restore");
            }

            return cb.Build();
        }

        private static string GetSet(PropertySetKind propSetKind)
        {
            return propSetKind switch
            {
                PropertySetKind.NoSet => string.Empty,
                PropertySetKind.Always => "set; ",
                PropertySetKind.Init => "init; ",
                _ => throw new ArgumentOutOfRangeException(nameof(propSetKind), propSetKind, null),
            };
        }

        private static void BuildMethod(CodeBuilder cb, MethodInfo method)
        {
            cb.AppendAndNormalizeMultipleLines(method.Documentation);

            cb.AppendIndented($"{method.ReturnType} {method.Name}");

            if (method.GenericArgs.Count != 0)
            {
                cb.Append($"<{string.Join(", ", method.GenericArgs.Select(a => a.Arg))}>");
            }

            cb.Append($"({string.Join(", ", method.Parameters)})");

            if (method.GenericArgs.Count != 0)
            {
                var constraints = method
                    .GenericArgs.Where(a => !string.IsNullOrWhiteSpace(a.WhereConstraint))
                    .Select(a => a.WhereConstraint);
                cb.Append($" {string.Join(" ", constraints)}");
            }

            cb.Append(";");
            cb.BreakLine();
            cb.AppendLine("");
        }

        public override string ToString()
        {
            return Build();
        }
    }

    public enum PropertySetKind
    {
        NoSet = 0,
        Always = 1,
        Init = 2,
    }

    public class CodeBuilder
    {
        private readonly StringBuilder sb = new();
        private int indent;
        private string currentIndent = string.Empty;

        public void Indent()
        {
            indent += 4;
            currentIndent = new(' ', indent);
        }

        public void Dedent()
        {
            indent -= 4;
            currentIndent = new(' ', indent);
        }

        public void BreakLine()
        {
            sb.AppendLine();
        }

        public void AppendIndented(string str)
        {
            sb.Append(' ', indent);
            sb.Append(str);
        }

        public void AppendLine(string str)
        {
            sb.Append(' ', indent);
            sb.AppendLine(str);
        }

        public void Append(string str)
        {
            sb.Append(str);
        }

        public void AppendAndNormalizeMultipleLines(string doc)
        {
            if (string.IsNullOrWhiteSpace(doc))
            {
                return;
            }

            foreach (var line in doc.SplitToLines())
            {
                sb.AppendLine(IndentStr(line));
            }
        }

        private string IndentStr(string str)
        {
            return str.TrimStart().Insert(0, currentIndent);
        }

        public string Build()
        {
            return sb.ToString();
        }
    }
}
